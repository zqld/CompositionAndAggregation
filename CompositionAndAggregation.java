package com.mycompany.compositionandaggregation;
/*
Определим, где используется композиция и агрегация:
Агрегация:
Создание объекта Car с указанием цвета и типа трансмиссии (Car car = new Car("красный", "V5")) представляет 
агрегацию. Объект Car и объект Transmission (трансмиссия) создаются независимо, и объект Car просто ссылается 
на объект Transmission.
Вызов метода car.transmission.Availability() также представляет агрегацию, так как объект Car использует объект
Transmission, который может существовать независимо.
Композиция:
Создание объекта PlushCubes (PlushCubes plushCubes = new PlushCubes("черного")) представляет композицию. 
Объект PlushCubes создается и используется исключительно внутри объекта Car.
Создание объекта Car с использованием объекта PlushCubes (Car car1 = new Car(plushCubes)) также представляет композицию,
так как объект PlushCubes является частью объекта Car и не может существовать независимо от него.
Вызов метода car1.CubesInTheCar() демонстрирует использование композиции, так как метод работает с объектом PlushCubes, 
который является частью объекта Car.
*/
// Класс, содержащий метод main и демонстрирующий использование агрегации и композиции
public class CompositionAndAggregation {

    public static void main(String[] args) {
        // Создаем объект Car с указанием цвета и типа трансмиссии (агрегация)
        Car car = new Car("красный", "V5");
        car.printType(); // Выводит информацию о типе трансмиссии и цвете машины (агрегация)
        car.transmission.Availability(); // Выводит информацию о доступности трансмиссии (агрегация)

        // Создаем объект PlushCubes, который будет использоваться внутри другого объекта Car (композиция)
        PlushCubes plushCubes = new PlushCubes("черного");

        // Создаем новый объект Car, используя объект PlushCubes через композицию
        Car car1 = new Car(plushCubes);
        car1.CubesInTheCar(); // Выводит информацию о цвете кубиков внутри машины (композиция)
    }
}

